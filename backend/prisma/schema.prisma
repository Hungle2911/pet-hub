// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  auth0Id     String     @unique // Add this to link with Auth0
  first_name  String     @db.VarChar(60)
  last_name   String     @db.VarChar(60)
  email       String?    @unique @db.VarChar(50)
  role        Role       @default(OWNER)
  latitude    Float?
  longitude   Float?
  location    String
  description String?
  catOwner    CatOwner?
  catSitter   CatSitter?
  created_at  DateTime   @default(now()) @db.Timestamp
  updated_at  DateTime   @updatedAt @db.Timestamp
}

model CatOwner {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [userId], references: [id])
  userId   Int       @unique
  cats     Cat[]
  bookings Booking[]
}

model CatSitter {
  id           Int            @id @default(autoincrement())
  user         User           @relation(fields: [userId], references: [id])
  userId       Int            @unique
  experience   String
  rate         Float
  availability Availability[]
  bookings     Booking[]
}

model Cat {
  id             Int      @id @default(autoincrement())
  name           String
  age            Int
  breed          String
  photo          String?
  medicalHistory String?
  behavior       String?
  owner          CatOwner @relation(fields: [ownerId], references: [id])
  ownerId        Int
}

model Availability {
  id          Int       @id @default(autoincrement())
  date        DateTime
  isAvailable Boolean
  catSitter   CatSitter @relation(fields: [catSitterId], references: [id])
  catSitterId Int
}

model Booking {
  id          Int           @id @default(autoincrement())
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus
  catOwner    CatOwner      @relation(fields: [catOwnerId], references: [id])
  catOwnerId  Int
  catSitter   CatSitter     @relation(fields: [catSitterId], references: [id])
  catSitterId Int
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum Role {
  OWNER
  PET_SITTER
}
